@using AspDotNetMVC7FluentValidationExample.ViewModels
@model ExampleCreateViewModel

@{
    var title = "Create Example";

    ViewData["Title"] = title;
}

<form asp-controller="Example" asp-action="Create" method="POST">

    <!--DOESNT WORK-->
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <!--WORKS, but shows duplicates-->
    @*<div asp-validation-summary="All" class="text-danger"></div>*@
    <!--WORKS, but shows duplicates-->
    @*@Html.ValidationSummary(false)*@
    <!--WORKS, but shows duplicates-->
    @*@Html.ValidationSummary(false, "", new { @class = "text-danger" })*@

    <br />
    @Html.LabelFor(m => m.FirstLineOfAddress)
    <br />
    @Html.TextBoxFor(m => m.FirstLineOfAddress)
    <br />
    @*@Html.ValidationMessageFor(m => m.FirstLineOfAddress, null, new { @class = "text-danger" })*@

    <br />
    @Html.LabelFor(m => m.PropertyPrice)
    <br />
    @Html.TextBoxFor(m => m.PropertyPrice)
    <br />
    @*@Html.ValidationMessageFor(m => m.PropertyPrice, null, new { @class = "text-danger" })*@

    <br />
    @Html.LabelFor(m => m.Currency)
    <br />
    @Html.DropDownListFor(m => m.Currency, Model.Currencies, "Please select...", null)
    <br />
    @*@Html.ValidationMessageFor(m => m.Currency, null, new { @class = "text-danger" })*@

    <br />
    @Html.LabelFor(m => m.Description)
    <br />
    @Html.TextAreaFor(m => m.Description, 10, 50, null)
    <br />
    @*@Html.ValidationMessageFor(m => m.Description, null, new { @class = "text-danger" })*@

    <br />
    <button type="submit">Submit</button>
</form>